doctype html
html
  head
    title MakerTracker
  body
    link(type="text/css" href="/static/graph.css" rel="stylesheet")
    script(src='http://d3js.org/d3.v3.min.js')
    script(type='text/javascript').
      var width = 800, height = 600;
      var color = d3.scale.category20();
      var force = d3.layout.force()
          .charge(-500)
          .linkDistance(75)
          .size([width, height]);
      var svg = d3.select('body').append('svg')
          .attr('width', width)
          .attr('height', height);
      function scaledSize(unscaled) {
        return (-1000/(unscaled + (1000/45))) + 50;
      }
      d3.json("/data/cached.json", function(error, graph) {
        force
            .nodes(graph.nodes)
            .links(graph.links)
            .start();
        var link = svg.selectAll('.link')
            .data(graph.links)
            .enter()
            .append('line')
            .attr('class', 'link')
            .style('stroke-width', function(d) {
              return Math.sqrt(d.value);
            });
        var node = svg.selectAll('.node')
            .data(graph.nodes)
            .enter()
            .append('circle')
            .attr('class', 'node')
            .attr('r', function(d) {
              if (d.type == 'person') {
                return 5;
              } else {
                return scaledSize(d.size);
              }
            })
            .style('fill', function(d) {
              return color(d.group);
            })
            .call(force.drag);

        node.append('title')
            .text(function(d) { return d.name; });

        force.on('tick', function() {
          link.attr('x1', function(d) { return d.source.x; })
              .attr('y1', function(d) { return d.source.y; })
              .attr('x2', function(d) { return d.target.x; })
              .attr('y2', function(d) { return d.target.y; })

          node.attr('cx', function(d) { return d.x; })
              .attr('cy', function(d) { return d.y; })
        });
      });